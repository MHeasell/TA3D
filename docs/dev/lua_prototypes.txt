// Mission scripting prototypes
add_attack_mission( unit_id, target_id )
add_build_mission( unit_id, pos_x, pos_z, unit_type )
add_guard_mission( unit_id, target_id )
add_move_mission( unit_id, pos_x, pos_z )
add_patrol_mission( unit_id, pos_x, pos_z )
add_wait_attacked_mission( unit_id, target_id )
add_wait_mission( unit_id, time )
allied( player_id0, player_id1 )
annihilated( player_id )
attack( attacker_id, target_id )							// Like add_attack_mission excepts it orders the unit to do it NOW !!
box( x1,y1,x2,y2,r,g,b )
change_unit_owner( unit_id, player_id )
circle( x,y,ray,r,g,b )
clf()
cls()
cls_for( player_id )										// Like cls but affects only player_id
commander( player_id )
create_feature( feature_type, x, z )
create_unit( player_id, unit_type_id, x, z )
draw_image_for( str image_name, x1, y1, x2, y2, player_id )
draw_image( str image_name, x1, y1, x2, y2 )
fillbox( x1,y1,x2,y2,r,g,b )
get_image_size( str image_name )		// returns w, h
get_max_unit_number()
get_screen_size()				// returns w, h
get_unit_health( unit_id )
get_unit_number()
get_unit_number_for_player( player_id )
get_unit_owner( unit_id )
give_energy( player_id, amount )
give_metal( player_id, amount )
has_mobile_units( player_id )
has_unit( player_id, unit_type_id )
init_res()
is_unit_of_type( unit_id, unit_type_id )
kick_unit( unit_id, damage )
kill_unit( unit_id )
line( x1,y1,x2,y2,r,g,b )
local_player()
lock_orders( unit_id )
map_h()
map_w()
move_unit( unit_id, x, z )
nb_players()
nb_unit_of_type( player_id, unit_type_id )
player_side( player_id )
play( filename )
play_for( filename )
point( x,y,r,g,b )
send_signal( player_id, signal )
set_cam_mode( mode )	-> uses the signal system
set_cam_pos( player_id,x,z )
set_cam( player_id, { pos = {x, y, z}, dir = {x, y, z}, mode } )      // mode = false (normal cam), true (freecam), dir = { x = heading, y = pitch, z = roll }
set_standing_orders( unit_id, move_order, fire_order )
set_unit_health( unit_id, health_percentage )
start_x( player_id )
start_z( player_id )
text_print_for( x, y, str, player_id )
text_print( x, y, str )
triangle( x1,y1,x2,y2,x3,y3,r,g,b )
unit_pos( unit_id )     // Returns a vector
unit_angle( unit_id )   // Returns a vector
unit_height( unit_id )
unit_piece_pos( unit_id, piece )    // Returns a vector
unit_piece_dir( unit_id, piece )    // Returns a normalized vector
unit_x( unit_id )
unit_y( unit_id )
unit_z( unit_id )
unlock_orders( unit_id )

// Unit scripting prototypes
attach_unit(unit_id, piece_id)
cache(obj_id)
dont_cache(obj_id)
dont_shade(obj_id)
drop_unit(unit_id)
emit_sfx(smoke_type, from_piece)
explode(obj_id, explosion_type)
get(type, v1, v2)
get_value_from_port(port)
hide(obj_id)
is_moving(obj_id, axis_id)
is_turning(obj_id, axis_id)
move(obj_id, axis_id, target_pos, speed)
move_piece_now(obj, axis, pos)
piece("piece0","piece1","piece2",...)               // Defines global variables piece0, piece1, ... and fill the __piece_list table used by the engine to link piece IDs to model pieces
set(type, v)
set_script_value(script_name, value)                // Used to trigger weapon fires
set_value(type, v)
shade(obj_id)
show(obj_id)
spin(obj_id, axis, speed, (accel))
stop_spin(obj_id, axis, (speed))
turn(obj_id, axis, angle, speed)
turn_piece_now(obj, axis, angle)
unit_ID()
unit_position(unit_id) = vector(x,y,z)
wait_for_move(obj_id, axis_id)
wait_for_turn(obj_id, axis_id)

// AI scripting prototypes
add_area_build_mission( unit_id, pos_x, pos_z, radius, unit_type )		// Like add_build_mission except it looks for a place to build the unit around given coordinates (at a maximum distance of radius in blocs - C API uses radius = 50)
add_attack_mission( unit_id, target_id )
add_build_mission( unit_id, pos_x, pos_z, unit_type )
add_guard_mission( unit_id, target_id )
add_move_mission( unit_id, pos_x, pos_z )
add_patrol_mission( unit_id, pos_x, pos_z )
add_wait_mission( unit_id, time )
allied( id0, id1 )
attack( attacker_id, target_id )
get_area_units (nx, ny, sx, sy, Type, playerID)		// Type can be a normal unit type, or -1 for all, or Builder for builders only, or CanAttack for units which can attack
get_build_list( type )                      // returns the list of units units of type `type` can build
get_max_unit_number()
get_path_length_for_unit_type( start_x, start_z, end_x, end_z, unit_id, max_dist ) // returns path length if any, -1 if none was found
get_player_resources (playerID)				// Returns nil if playerID is incorrect or a table with the following fields set:
											//  energy
											//  energy_produced
											//  energy_used
											//  energy_storage
											//  metal
											//  metal_produced
											//  metal_used
											//  metal_storage
get_type_data( type )                       // returns information about unit type:
                                            //  canattack
                                            //  canmove
                                            //  canfly
                                            //  canguard
                                            //  canstop
                                            //  candgun
                                            //  canhover
                                            //  canload
                                            //  canpatrol
                                            //  canbuild
                                            //  canresurrect
                                            //  maxhp
                                            //  speed
                                            //  buildlist
                                            //  metalcost
                                            //  energycost
                                            //  energymake
                                            //  metalmake
                                            //  energyuse
                                            //  energystorage
                                            //  metalstorage
                                            //  name
                                            //  buildtime
                                           	//  workertime
get_unit_data                               // get_unit_data( index )
get_unit_health( unit_id )
get_unit_list                               // get_unit_list( player_id )
                                            // returns an array of tables containing unit data: (should be self explanatory I hope)
                                            //  index
                                            //  UID
                                            //  owner
                                            //  hp
                                            //  type (ID of unit type)
get_unit_number()
get_unit_number_for_player( player_id )
get_unit_owner( unit_id )
kmeans( array_of_vector, k )                // returns the result of the k-means algorithm on array_of_vector after k + 2 steps
map_h()
map_w()
nb_players()
nb_unit_types()
playerID()
player_side( player_id )
self_destruct_unit( unit_id )
set_standing_orders( unit_id, move_order, fire_order )
unit_position( unit_id )

// Common lua thread prototypes
end_thread()                                // Terminates the current thread
game_signal( signal )                       // sends a signal to the thread caller (kind of return value but without stopping the Lua thread)
logmsg( str )
mouse_b()
mouse_x()
mouse_y()
mouse_z()
set_signal_mask( signal_mask )              // Set the signal_mask of the current thread
signal( sig )                               // Kill all threads (of the same environment) matching signal_mask == sig
sleep( time )                               // Pause current thread for given time
start_script( function, parameters )        // Runs function in a new thread with the given parameters (it gives it the same signal_mask)
time()
wait()                                      // Stops current thread until something wakes it up or kills it
yield()                                     // Yields (returns to engine and waits for the next call to lua_resume)

// Prototypes for global environment manipulation
get_global_boolean(name)
get_global_number(name)
get_global_string(name)
is_global_boolean(name)
is_global_number(name)
is_global_string(name)
set_global_boolean(name, value)
set_global_number(name, value)
set_global_string(name, value)

