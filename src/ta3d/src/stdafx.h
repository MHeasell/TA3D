/*  TA3D, a remake of Total Annihilation
    Copyright (C) 2006  Roland BROCHARD

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA*/

/*
**  File: stdafx.h
** Notes:  **** PLEASE SEE README.txt FOR LICENCE AGREEMENT ****
**  Cire: *stdafx.h and stdafx.cpp will generate a pch file
**         (pre compiled headers).
**        *All other cpp files MUST include this file as its first include.
**        *No .h files should include this file.
**        *The goal is to include everything that we need from system, and
**          game libiries, ie everything we need external to our project.
*/

#ifndef __TA3D_STDAFX_H__
# define __TA3D_STDAFX_H__

// Include the config options generated by the configure script
# include "../config.h"

# include <yuni/yuni.h>


// TODO : Should be removed
# ifdef YUNI_OS_WINDOWS
# 	ifdef YUNI_OS_MSVC
#		define TA3D_PLATFORM_MSVC
# 	else
# 		define TA3D_PLATFORM_GCC
#		define TA3D_PLATFORM_MINGW
# 	endif
# endif


// Fundamental types
typedef Yuni::uint64   uint64;
typedef Yuni::uint32   uint32;
typedef Yuni::uint16   uint16;
typedef Yuni::uint8    uint8;
typedef Yuni::sint64   sint64;
typedef Yuni::sint32   sint32;
typedef Yuni::sint16   sint16;
typedef Yuni::sint8    sint8;

typedef uint8         byte;
typedef unsigned char uchar;
typedef signed char   schar;



// TODO : Should removed
/*
** The SDL library
*/
# if defined TA3D_PLATFORM_WINDOWS //&& defined TA3D_PLATFORM_MSVC
#	include <yuni/toolbox/system/windows.hdr.h>
#   ifdef TA3D_PLATFORM_MSVC
#      pragma warning(disable : 4554)
#      pragma warning(disable : 4996)
#      pragma comment( lib, "opengl32.lib" )
#      pragma comment( lib, "glu32.lib" )
#      pragma comment( lib, "glaux.lib" )
#      pragma comment( lib, "tools/win32/msvc/libs/glew32.lib" )
#      include "tools/win32/include/GL/glew.h"
#   endif
#   include "tools/win32/mingw32/include/GL/glew.h"
#   include "SDL.h"
#   include "SDL_image.h"
# else
/*
** The OpenGL library
*/
#   include <GL/glew.h>
#   include "SDL.h"
#   include "SDL_image.h"
#endif




# if defined(TA3D_PLATFORM_MSVC)
	#define strcasecmp(x,xx) _stricmp( x, xx )
# endif



// Should be removed
# include "misc/string.h"




#define TA3D_API_SI static inline
#define TA3D_API_EI extern inline
#define TA3D_API_S static
#define TA3D_API_E extern


namespace TA3D
{

	//! \name String manipulations
	//@{

	String format(const char* fmt, ...);

	sint32 SearchString(const String& s, const String& StringToSearch, const bool ignoreCase);

	String ReplaceString(const String& s, const String& toSearch, const String& replaceWith, const bool ignoreCase);

	String ReplaceChar(const String& s, const char toSearch, const char replaceWith);

	bool StartsWith(const String& a, const String& b);

	//@} String manipulations

#if defined TA3D_PLATFORM_WINDOWS && defined TA3D_PLATFORM_MSVC
	void ExtractPathFile(const String& szFullFileName, String& szFile, String& szDir);
#endif


	String GetClientPath(void);

	uint32 file_size(const String &filename);

	int ASCIItoUTF8(const byte c, byte *out);

	String InttoUTF8(const uint16 c);



	/*!
	** \brief Convert an UTF-8 String into a WideChar String
	** \todo This class must be removed as soon as possible and is only here to prevent against
	** stange bugs with the previous implementation
	*/
	struct WString
	{
	public:
		WString(const char* s);
		WString(const String& str);

		void fromUtf8(const char* s, size_t length);
		const wchar_t* cw_str() const {return pBuffer;}

	private:
		wchar_t pBuffer[5120];
	};


	void rest(uint32 msec);

} // namespace TA3D

#define FILE_SIZE	file_size

#ifdef TA3D_PLATFORM_WINDOWS
# define FA_FILE     1
# define FA_DIREC    2
#else
# define FA_FILE     DT_REG
# define FA_DIREC    DT_DIR
#endif

#define FA_ALL      (FA_FILE | FA_DIREC)

// zuzuf: to prevent some warnings
# undef PACKAGE_BUGREPORT
# undef PACKAGE_NAME
# undef PACKAGE_TARNAME
# undef PACKAGE_STRING
# undef PACKAGE_VERSION


#endif // __TA3D_STDAFX_H__
